import React, { useState, useMemo, useEffect } from "react";

import { IconLayer } from '@deck.gl/layers/typed';
import Container from '@/components/container';
import { Content } from '@/components/content';
import QueryComponent from '@/components/query';
import UserInfo from '@/components/userInfo';
import styles from '@/styles/Home.module.scss';
import { getContent } from 'utils/fetchData';
import { connectionMessage } from 'utils/useConnectionMessage';
import { useHandleConnectionData } from 'utils/useHandleConnectionData';
import { Donationcenters } from '@/components/content.d';
import type {
    LayerDataSource,
  } from '@deck.gl/core/typed';

export async function getServerSideProps({ locale }: { locale: string }) {
    const contentData = await getContent(locale);
    return {
        props: {
            contentData,
        },
    };
}

function createSVGIcon(i: "center" | "mobile") { 
    return (i === 'center') ? `\
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1024" height="1024">
            <path fill="#E29494" transform="scale(2 2)" d="M370.919 93.2571C379.171 93.0455 385.267 94.8001 392.222 99.3028C412.211 85.4184 438.705 98.7146 438.22 122.576C437.949 135.895 429.62 142.5 420.874 151.006L405.221 166.162C400.909 170.474 396.184 174.388 392.222 179.039C383.351 171.949 354.544 145.257 349.132 137.479C336.822 119.786 349.684 96.4137 370.919 93.2571Z"/>
            <path fill="#5AB4C5" transform="scale(2 2)" d="M417.504 381.443C417.73 385.945 417.488 390.506 417.504 395.016C421.967 395.073 438.763 393.103 439.245 397.938C439.474 400.237 439.441 419.699 439.04 421.425C438.499 423.752 437.157 423.652 435.058 423.687C422.08 423.905 409.055 423.667 396.072 423.667L74.7597 423.667L74.7597 395.016L87.356 395.037C89.7411 395.052 92.2047 395.206 94.576 395.016C102.069 395.3 109.683 395.017 117.19 395.016L394.977 395.016L417.504 395.016C417.479 390.526 417.235 385.922 417.504 381.443Z"/>
            <path fill="#5AB4C5" transform="scale(2 2)" d="M94.576 231.967C89.6943 231.725 83.9107 232.783 79.2115 231.533C74.1135 230.176 72.4937 224.44 76.3908 220.996C79.4022 218.335 83.0864 216.085 86.319 213.655L243.267 95.7296C255.873 86.3003 252.925 83.892 264.199 92.6396L419.685 209.583C425.297 213.86 431.563 217.986 436.7 222.809C437.808 235.634 429.093 232.008 417.504 231.967L417.504 235.883C417.322 234.576 417.435 233.28 417.504 231.967C410.006 231.814 402.477 231.955 394.977 231.967C395.043 233.281 395.02 234.57 394.977 235.883C394.939 234.583 394.974 233.269 394.977 231.967C387.062 231.739 379.074 231.964 371.151 231.965L138.083 231.963C131.137 231.965 124.127 232.21 117.19 231.967L117.19 395.016C109.683 395.017 102.069 395.3 94.576 395.016L94.576 385.443C94.302 368.437 94.5769 351.377 94.5775 334.367L94.576 231.967Z"/>
            <path fill="#468D9B" transform="scale(2 2)" d="M94.576 231.967L108.712 231.939C111.433 231.909 114.525 231.555 117.19 231.967L117.19 395.016C109.683 395.017 102.069 395.3 94.576 395.016L94.576 385.443C94.8064 385.07 94.5764 360.765 94.5762 357.952L94.5761 273.681C94.5766 259.806 94.9468 245.829 94.576 231.967Z"/>
            <path fill="#C2DCE1" transform="scale(2 2)" d="M394.977 231.967C402.477 231.955 410.006 231.814 417.504 231.967C417.435 233.28 417.322 234.576 417.504 235.883L417.504 332.683C417.505 348.926 417.737 365.204 417.504 381.443C417.235 385.922 417.479 390.526 417.504 395.016L394.977 395.016L117.19 395.016L117.19 231.967C124.127 232.21 131.137 231.965 138.083 231.963L371.151 231.965C379.074 231.964 387.062 231.739 394.977 231.967C394.974 233.269 394.939 234.583 394.977 235.883C395.02 234.57 395.043 233.281 394.977 231.967ZM256.624 239.159C238.894 258.399 203.793 302.412 204.8 329.748C205.912 359.978 223.521 381.974 255.68 381.443C287.927 381.889 306.696 359.455 307.168 328.214C307.576 301.156 281.951 271.461 265.441 249.887C262.88 246.541 260.008 241.646 256.624 239.159Z"/>
            <path fill="#5AB4C5" transform="scale(2 2)" d="M137.392 263.496L168.028 263.509C171.237 263.509 187.235 262.015 188.049 265.49C188.916 269.191 188.548 273.302 188.549 277.093L188.549 311.788C188.546 316.472 190.449 326.712 184.375 327.988L151.379 327.972C136.767 327.924 132.76 332.029 132.776 315.68L132.782 279.181C132.763 273.749 130.55 264.267 137.392 263.496Z"/>
            <path fill="#468D9B" transform="scale(2 2)" d="M394.977 231.967C402.477 231.955 410.006 231.814 417.504 231.967C417.435 233.28 417.322 234.576 417.504 235.883L417.504 332.683C417.505 348.926 417.737 365.204 417.504 381.443C417.235 385.922 417.479 390.526 417.504 395.016L394.977 395.016L394.977 235.883C395.02 234.57 395.043 233.281 394.977 231.967Z"/>
            <path fill="#5AB4C5" transform="scale(2 2)" d="M328.829 259.742C337.994 259.514 347.228 259.751 356.4 259.754C361.983 259.757 377.965 257.337 379.913 263.842C380.855 266.988 380.482 315.056 380.093 321.505C379.892 324.846 378.873 327.196 375.313 327.988L346.698 327.997C340.903 327.997 334.712 328.363 328.969 327.554C321.114 326.448 322.997 317.844 322.992 312.003L322.995 275.536C323 269.867 320.904 260.321 328.829 259.742Z"/>
            <path fill="#E29494" transform="scale(2 2)" d="M256.624 239.159C260.008 241.646 262.88 246.541 265.441 249.887C281.951 271.461 307.576 301.156 307.168 328.214C306.696 359.455 287.927 381.889 255.68 381.443C223.521 381.974 205.912 359.978 204.8 329.748C203.793 302.412 238.894 258.399 256.624 239.159ZM255.68 294.793C248.79 296.897 251.885 310.477 251.905 317.676C247.878 317.597 238.956 317.147 235.391 317.734C232.14 318.269 229.665 321.716 232.585 324.502C235.17 326.968 248.125 326.032 251.905 326.012C251.88 331.33 249.373 345.952 255.68 347.561C257.68 347.141 258.775 346.709 260.29 345.252C261.19 339.748 260.274 331.813 260.29 326.012C266.13 326.038 280.3 328.85 280.262 321.084C280.235 315.567 263.503 317.659 260.29 317.676C260.284 311.402 263.55 294.653 255.68 294.793Z"/>
        </svg>
    `:`\
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1024" height="1024">
        <path fill="#BF6B6A" transform="scale(2 2)" d="M135.185 315.241C136.886 315.932 139.547 315.996 141.394 316.28C184.334 322.894 174.831 384.035 138.274 383.238C112.081 385.14 92.7732 355.845 107.065 332.638C114.405 320.72 122.73 318.141 135.185 315.241Z"/>
        <path fill="#BF6B6A" transform="scale(2 2)" d="M356.204 315.241C401.089 311.117 409.255 375.828 364.341 383.238C315.754 384.986 314.579 321.655 356.204 315.241Z"/>
        <path fill="#5AB4C5" transform="scale(2 2)" d="M320.093 172.261C335.32 172.475 350.582 172.272 365.813 172.265C378.03 172.259 393.419 169.396 401.461 181.084C405.637 187.155 409.925 199.634 412.9 206.767C419.605 222.837 426.458 238.838 432.962 254.994C462.691 265.808 455.058 288.692 452.614 314.098C450.122 339.997 446.927 343.234 420.54 343.227L402.109 343.21C399.869 323.062 382.677 308.458 362.852 307.075C342.201 305.635 319.725 322.179 318.372 343.661L193.637 343.661C188.399 343.679 183.155 343.747 177.917 343.661C169.233 297.331 104.636 295.668 94.83 343.661C84.5416 343.69 71.2038 345.689 63.7364 336.911C57.1848 329.209 57.9218 306.524 58.7376 295.53L304.393 295.663C319.946 295.759 320.134 283.864 320.116 273.019L320.093 172.261Z"/>
        <path fill="#FEFEFE" transform="scale(2 2)" d="M336.483 264.47L361.489 264.47L361.489 279.237L336.483 279.237L336.483 264.47Z"/>
        <path fill="#FEFEFE" transform="scale(2 2)" d="M417.819 287.918L453.185 287.918C451.075 298.108 448.695 308.243 446.409 318.395L446.409 320.492C435.418 320.267 424.382 320.485 413.387 320.492C414.515 309.627 416.51 298.777 417.819 287.918Z"/>
        <path fill="#FEFEFE" transform="scale(2 2)" d="M336.483 191.513L367.23 191.536C369.745 191.533 384.693 190.638 386.229 191.988C387.325 192.949 409.009 245.032 409.204 247.282L408.79 247.463L336.483 247.463L336.111 191.832L336.483 191.513Z"/>
        <path fill="#5AB4C5" transform="scale(2 2)" d="M80.3185 128.005C85.0883 127.701 89.9071 127.989 94.6838 127.995L278.837 127.993C288.07 127.99 296.463 127.612 303.804 134.31C315.873 145.321 312.469 166.393 312.456 181.535L312.466 264.277C312.479 269.582 312.939 275.33 312.419 280.597C311.39 291.035 297.548 287.948 290.375 287.918L58.7376 287.918C58.5717 285.215 58.7307 282.447 58.7316 279.734L58.733 172.11C58.7349 154.364 56.0499 131.516 80.3185 128.005ZM178.844 249.154C166.756 234.41 168.985 219.875 175.183 202.625C170.815 193.248 164.971 182.705 160.063 173.418C157.673 168.895 154.868 164.351 153.079 159.556C148.199 164.775 137.802 187.368 133.832 194.753L124.068 212.557C119.467 221.101 117.623 224.954 117.945 235.004C118.855 263.423 160.442 276.141 178.844 249.154Z"/>
        <path fill="#E29494" transform="scale(2 2)" d="M178.844 249.154C160.442 276.141 118.855 263.423 117.945 235.004C117.623 224.954 119.467 221.101 124.068 212.557L133.832 194.753C137.802 187.368 148.199 164.775 153.079 159.556C154.868 164.351 157.673 168.895 160.063 173.418C164.971 182.705 170.815 193.248 175.183 202.625C168.985 219.875 166.756 234.41 178.844 249.154ZM128.379 220.259C121.471 227.014 126.427 243.119 132.548 249.394C135.496 252.415 143.862 257.825 148.328 256.54C160.532 248.684 133.166 249.01 133.349 231.118C133.404 225.817 135.992 220.026 128.379 220.259Z"/>
        <path fill="#D7C2C2" transform="scale(2 2)" d="M175.183 202.625L196.36 161.583C200.109 154.185 204.516 143.342 209.587 136.962C217.744 153.371 226.195 169.595 234.725 185.812C238.847 193.651 245.792 204.084 247.957 212.485C257.779 250.589 209.148 281.562 178.844 249.154C166.756 234.41 168.985 219.875 175.183 202.625Z"/>
        <path fill="#BF6B6A" transform="scale(2 2)" d="M206.275 186.059C216.516 185.102 215.067 195.49 215.045 202.625C218.899 202.649 224.652 201.441 227.787 204.122C230.818 206.714 230.818 211.533 228.097 214.347C225.106 217.44 219.033 216.42 215.045 216.413C215.115 222.548 216.576 228.384 209.587 230.836C200.055 231.872 200.701 223.345 200.988 216.413C197.117 216.465 191.053 217.435 187.943 214.71C185.107 212.225 184.251 207.382 187.147 204.601C190.192 201.678 196.967 202.605 200.988 202.625C200.974 196.436 199.225 188.835 206.275 186.059Z"/>
    </svg>

    `;
}
  
function svgToDataURL(svg:string) {
    return `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svg)}`;
}

type vehicleType = {
    vehicleId: string
    lat: number
    lon: number
    timestamp: number
}

export default function Home({ contentData } : { contentData: Content }) {

    const [tabActiveId, setTabActiveId] = useState(1);
    const [positions, setPositions] = useState<Donationcenters[]>([]);

    const handleLaunchMap = (event: { data: string }) => {
        const result: { name: string; data: boolean } = JSON.parse(event.data);
      
        console.log('result', result.name, event.data);
      };
    useHandleConnectionData(handleLaunchMap)

    const iconLayer = useMemo(() => 
        new IconLayer<Donationcenters>({
            id: `deviceicon_layer`,
            data: positions,
            getIcon: d => ({
                url: svgToDataURL(createSVGIcon(d.type)),
                id: d.center_id,
                width: 100,
                height: 100,
                anchorY: 100
            }),
            getPosition: d => [d.longitude, d.latitude],
            getSize: d => 50,
            onClick: () => {
                console.log('onClick');
                connectionMessage("location", null);
            }
        })
    , [positions]);

    useEffect(() => {
        const fetchData = async () => {
            const response = await fetch('https://a9e9-140-112-167-123.ngrok-free.app/api/donationcenters', {
                headers: { 
                    'ngrok-skip-browser-warning': 'true',
                    'Access-Control-Allow-Origin': '*'
                }
            });
            const data = await response.json();
            setPositions(data);
        };
        // fetchData();
    }, []);
    
    
    return (
        <Container>
            {/* <button onClick={() => {
                console.log('onClick');
                // connectionMessage("location", null);
                // connectionMessage("userinfo", null);
                connectionMessage("deviceinfo", null);
            }}>按鈕</button> */}
            {/* <div className={styles.header}>
                <div className={styles.title}>捐血福報</div>
                <div className={styles.closepanel}>
                    <div className={styles.close} />
                </div>
            </div> */}
            <section className={styles.tabs}>
                <div 
                    className={styles.tabLabel + ' ' + (tabActiveId === 1 ? styles.tabLabelActive : '')}
                    onClick={() => {
                        setTabActiveId(1)
                    }}
                >捐血查詢</div>
                <div 
                    className={styles.tabLabel + ' ' + (tabActiveId === 2 ? styles.tabLabelActive : '')} 
                    onClick={() => {
                        setTabActiveId(2)
                    }}>個人資訊</div>
                <div
                    className={styles.slider}
                    style={{ transform: `translate(calc(${(tabActiveId === 1 ? 0 : 100)}%))` }}
                ></div>
            </section>
            {
                tabActiveId === 1 
                    ? <QueryComponent layer={[iconLayer]} data={positions} /> 
                    : <UserInfo/>
            }
        </Container>
    );
}
